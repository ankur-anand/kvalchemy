// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package walrecord

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ColumnEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsColumnEntry(buf []byte, offset flatbuffers.UOffsetT) *ColumnEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ColumnEntry{}
	x.Init(buf, n+offset)
	return x
}

func FinishColumnEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsColumnEntry(buf []byte, offset flatbuffers.UOffsetT) *ColumnEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ColumnEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedColumnEntryBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *ColumnEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ColumnEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ColumnEntry) ColumnName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ColumnEntry) ColumnValue(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ColumnEntry) ColumnValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ColumnEntry) ColumnValueBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ColumnEntry) MutateColumnValue(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ColumnEntry) Crc32Checksum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ColumnEntry) MutateCrc32Checksum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func ColumnEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ColumnEntryAddColumnName(builder *flatbuffers.Builder, columnName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(columnName), 0)
}
func ColumnEntryAddColumnValue(builder *flatbuffers.Builder, columnValue flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(columnValue), 0)
}
func ColumnEntryStartColumnValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ColumnEntryAddCrc32Checksum(builder *flatbuffers.Builder, crc32Checksum uint32) {
	builder.PrependUint32Slot(2, crc32Checksum, 0)
}
func ColumnEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
