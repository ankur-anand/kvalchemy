// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: kvalchemy/replicator/v1/service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamWALRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	LastSeenMetadata *Metadata              `protobuf:"bytes,1,opt,name=last_seen_metadata,json=lastSeenMetadata,proto3,oneof" json:"last_seen_metadata,omitempty"` // Last applied WAL checkpoint
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StreamWALRequest) Reset() {
	*x = StreamWALRequest{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamWALRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWALRequest) ProtoMessage() {}

func (x *StreamWALRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWALRequest.ProtoReflect.Descriptor instead.
func (*StreamWALRequest) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *StreamWALRequest) GetLastSeenMetadata() *Metadata {
	if x != nil {
		return x.LastSeenMetadata
	}
	return nil
}

// Server's Response Message (Streaming)
type StreamWALResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalRecords    []*WALRecord           `protobuf:"bytes,1,rep,name=wal_records,json=walRecords,proto3" json:"wal_records,omitempty"` // A batch of WAL records
	SentAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`             // Server timestamp when the batch was sent
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamWALResponse) Reset() {
	*x = StreamWALResponse{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamWALResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWALResponse) ProtoMessage() {}

func (x *StreamWALResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWALResponse.ProtoReflect.Descriptor instead.
func (*StreamWALResponse) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *StreamWALResponse) GetWalRecords() []*WALRecord {
	if x != nil {
		return x.WalRecords
	}
	return nil
}

func (x *StreamWALResponse) GetSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

// WAL Record Format
type WALRecord struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Metadata       *Metadata              `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CompressedData []byte                 `protobuf:"bytes,2,opt,name=compressed_data,json=compressedData,proto3" json:"compressed_data,omitempty"` // Compressed WAL entry (LZ4)
	IsChunked      bool                   `protobuf:"varint,3,opt,name=is_chunked,json=isChunked,proto3" json:"is_chunked,omitempty"`               // Is this part of a chunked WAL entry?
	ChunkIndex     uint32                 `protobuf:"varint,4,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`            // Chunk number in the sequence
	TotalChunks    uint32                 `protobuf:"varint,5,opt,name=total_chunks,json=totalChunks,proto3" json:"total_chunks,omitempty"`         // Total chunks in this WAL entry
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WALRecord) Reset() {
	*x = WALRecord{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WALRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WALRecord) ProtoMessage() {}

func (x *WALRecord) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WALRecord.ProtoReflect.Descriptor instead.
func (*WALRecord) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *WALRecord) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WALRecord) GetCompressedData() []byte {
	if x != nil {
		return x.CompressedData
	}
	return nil
}

func (x *WALRecord) GetIsChunked() bool {
	if x != nil {
		return x.IsChunked
	}
	return false
}

func (x *WALRecord) GetChunkIndex() uint32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *WALRecord) GetTotalChunks() uint32 {
	if x != nil {
		return x.TotalChunks
	}
	return 0
}

// Metadata for tracking WAL state
type Metadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Record        []byte                 `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *Metadata) GetRecord() []byte {
	if x != nil {
		return x.Record
	}
	return nil
}

var File_kvalchemy_replicator_v1_service_proto protoreflect.FileDescriptor

var file_kvalchemy_replicator_v1_service_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x7f, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x41, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x41, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x77, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x22, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x32,
	0x7d, 0x0a, 0x15, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x57, 0x41, 0x4c, 0x12, 0x29, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d,
	0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2a, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x47,
	0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x6b,
	0x75, 0x72, 0x2d, 0x61, 0x6e, 0x61, 0x6e, 0x64, 0x2f, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_kvalchemy_replicator_v1_service_proto_rawDescOnce sync.Once
	file_kvalchemy_replicator_v1_service_proto_rawDescData []byte
)

func file_kvalchemy_replicator_v1_service_proto_rawDescGZIP() []byte {
	file_kvalchemy_replicator_v1_service_proto_rawDescOnce.Do(func() {
		file_kvalchemy_replicator_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kvalchemy_replicator_v1_service_proto_rawDesc), len(file_kvalchemy_replicator_v1_service_proto_rawDesc)))
	})
	return file_kvalchemy_replicator_v1_service_proto_rawDescData
}

var file_kvalchemy_replicator_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kvalchemy_replicator_v1_service_proto_goTypes = []any{
	(*StreamWALRequest)(nil),      // 0: kvalchemy.replicator.v1.StreamWALRequest
	(*StreamWALResponse)(nil),     // 1: kvalchemy.replicator.v1.StreamWALResponse
	(*WALRecord)(nil),             // 2: kvalchemy.replicator.v1.WALRecord
	(*Metadata)(nil),              // 3: kvalchemy.replicator.v1.Metadata
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_kvalchemy_replicator_v1_service_proto_depIdxs = []int32{
	3, // 0: kvalchemy.replicator.v1.StreamWALRequest.last_seen_metadata:type_name -> kvalchemy.replicator.v1.Metadata
	2, // 1: kvalchemy.replicator.v1.StreamWALResponse.wal_records:type_name -> kvalchemy.replicator.v1.WALRecord
	4, // 2: kvalchemy.replicator.v1.StreamWALResponse.sent_at:type_name -> google.protobuf.Timestamp
	3, // 3: kvalchemy.replicator.v1.WALRecord.metadata:type_name -> kvalchemy.replicator.v1.Metadata
	0, // 4: kvalchemy.replicator.v1.WALReplicationService.StreamWAL:input_type -> kvalchemy.replicator.v1.StreamWALRequest
	1, // 5: kvalchemy.replicator.v1.WALReplicationService.StreamWAL:output_type -> kvalchemy.replicator.v1.StreamWALResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kvalchemy_replicator_v1_service_proto_init() }
func file_kvalchemy_replicator_v1_service_proto_init() {
	if File_kvalchemy_replicator_v1_service_proto != nil {
		return
	}
	file_kvalchemy_replicator_v1_service_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kvalchemy_replicator_v1_service_proto_rawDesc), len(file_kvalchemy_replicator_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kvalchemy_replicator_v1_service_proto_goTypes,
		DependencyIndexes: file_kvalchemy_replicator_v1_service_proto_depIdxs,
		MessageInfos:      file_kvalchemy_replicator_v1_service_proto_msgTypes,
	}.Build()
	File_kvalchemy_replicator_v1_service_proto = out.File
	file_kvalchemy_replicator_v1_service_proto_goTypes = nil
	file_kvalchemy_replicator_v1_service_proto_depIdxs = nil
}
