// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: kvalchemy/replicator/v1/service.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamWALRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      []byte                 `protobuf:"bytes,1,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"` // Last applied WAL checkpoint
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamWALRequest) Reset() {
	*x = StreamWALRequest{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamWALRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWALRequest) ProtoMessage() {}

func (x *StreamWALRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWALRequest.ProtoReflect.Descriptor instead.
func (*StreamWALRequest) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{0}
}

func (x *StreamWALRequest) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Server's Response Message (Streaming)
type StreamWALResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WalRecords    []*WALRecord           `protobuf:"bytes,1,rep,name=wal_records,json=walRecords,proto3" json:"wal_records,omitempty"` // A batch of WAL records
	SentAt        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=sent_at,json=sentAt,proto3" json:"sent_at,omitempty"`             // Server timestamp when the batch was sent
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamWALResponse) Reset() {
	*x = StreamWALResponse{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamWALResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWALResponse) ProtoMessage() {}

func (x *StreamWALResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWALResponse.ProtoReflect.Descriptor instead.
func (*StreamWALResponse) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{1}
}

func (x *StreamWALResponse) GetWalRecords() []*WALRecord {
	if x != nil {
		return x.WalRecords
	}
	return nil
}

func (x *StreamWALResponse) GetSentAt() *timestamppb.Timestamp {
	if x != nil {
		return x.SentAt
	}
	return nil
}

// WAL Record Format
type WALRecord struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Metadata       []byte                 `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	CompressedData []byte                 `protobuf:"bytes,2,opt,name=compressed_data,json=compressedData,proto3" json:"compressed_data,omitempty"` // Compressed WAL entry (LZ4)
	IsChunked      bool                   `protobuf:"varint,3,opt,name=is_chunked,json=isChunked,proto3" json:"is_chunked,omitempty"`               // Is this part of a chunked WAL entry?
	ChunkIndex     uint32                 `protobuf:"varint,4,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`            // Chunk number in the sequence
	ChunkType      string                 `protobuf:"bytes,5,opt,name=chunk_type,json=chunkType,proto3" json:"chunk_type,omitempty"`                // start and end of chunk marker.
	Checksum       uint32                 `protobuf:"fixed32,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WALRecord) Reset() {
	*x = WALRecord{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WALRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WALRecord) ProtoMessage() {}

func (x *WALRecord) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WALRecord.ProtoReflect.Descriptor instead.
func (*WALRecord) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{2}
}

func (x *WALRecord) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WALRecord) GetCompressedData() []byte {
	if x != nil {
		return x.CompressedData
	}
	return nil
}

func (x *WALRecord) GetIsChunked() bool {
	if x != nil {
		return x.IsChunked
	}
	return false
}

func (x *WALRecord) GetChunkIndex() uint32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *WALRecord) GetChunkType() string {
	if x != nil {
		return x.ChunkType
	}
	return ""
}

func (x *WALRecord) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

type PutKVRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutKVRequest) Reset() {
	*x = PutKVRequest{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutKVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutKVRequest) ProtoMessage() {}

func (x *PutKVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutKVRequest.ProtoReflect.Descriptor instead.
func (*PutKVRequest) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{3}
}

func (x *PutKVRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PutKVRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PutKVRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type StreamPutKVRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KvPairs       []*PutKVRequest        `protobuf:"bytes,1,rep,name=kv_pairs,json=kvPairs,proto3" json:"kv_pairs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPutKVRequest) Reset() {
	*x = StreamPutKVRequest{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPutKVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPutKVRequest) ProtoMessage() {}

func (x *StreamPutKVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPutKVRequest.ProtoReflect.Descriptor instead.
func (*StreamPutKVRequest) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{4}
}

func (x *StreamPutKVRequest) GetKvPairs() []*PutKVRequest {
	if x != nil {
		return x.KvPairs
	}
	return nil
}

type PutKVResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutKVResponse) Reset() {
	*x = PutKVResponse{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutKVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutKVResponse) ProtoMessage() {}

func (x *PutKVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutKVResponse.ProtoReflect.Descriptor instead.
func (*PutKVResponse) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{5}
}

type StreamPutKVResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPutKVResponse) Reset() {
	*x = StreamPutKVResponse{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPutKVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPutKVResponse) ProtoMessage() {}

func (x *StreamPutKVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPutKVResponse.ProtoReflect.Descriptor instead.
func (*StreamPutKVResponse) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{6}
}

type DeleteKVRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKVRequest) Reset() {
	*x = DeleteKVRequest{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKVRequest) ProtoMessage() {}

func (x *DeleteKVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKVRequest.ProtoReflect.Descriptor instead.
func (*DeleteKVRequest) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteKVRequest) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type DeleteKVResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKVResponse) Reset() {
	*x = DeleteKVResponse{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKVResponse) ProtoMessage() {}

func (x *DeleteKVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKVResponse.ProtoReflect.Descriptor instead.
func (*DeleteKVResponse) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{8}
}

type StreamDeleteKVRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deletes       []*DeleteKVRequest     `protobuf:"bytes,1,rep,name=deletes,proto3" json:"deletes,omitempty"` // List of keys to delete
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDeleteKVRequest) Reset() {
	*x = StreamDeleteKVRequest{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDeleteKVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeleteKVRequest) ProtoMessage() {}

func (x *StreamDeleteKVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeleteKVRequest.ProtoReflect.Descriptor instead.
func (*StreamDeleteKVRequest) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{9}
}

func (x *StreamDeleteKVRequest) GetDeletes() []*DeleteKVRequest {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type StreamDeleteKVResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamDeleteKVResponse) Reset() {
	*x = StreamDeleteKVResponse{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamDeleteKVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeleteKVResponse) ProtoMessage() {}

func (x *StreamDeleteKVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeleteKVResponse.ProtoReflect.Descriptor instead.
func (*StreamDeleteKVResponse) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{10}
}

type StreamPutKVChunksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to RequestType:
	//
	//	*StreamPutKVChunksRequest_StartMarker
	//	*StreamPutKVChunksRequest_CommitMarker
	//	*StreamPutKVChunksRequest_Chunk
	RequestType   isStreamPutKVChunksRequest_RequestType `protobuf_oneof:"request_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPutKVChunksRequest) Reset() {
	*x = StreamPutKVChunksRequest{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPutKVChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPutKVChunksRequest) ProtoMessage() {}

func (x *StreamPutKVChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPutKVChunksRequest.ProtoReflect.Descriptor instead.
func (*StreamPutKVChunksRequest) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{11}
}

func (x *StreamPutKVChunksRequest) GetRequestType() isStreamPutKVChunksRequest_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *StreamPutKVChunksRequest) GetStartMarker() *ChunkStartMarker {
	if x != nil {
		if x, ok := x.RequestType.(*StreamPutKVChunksRequest_StartMarker); ok {
			return x.StartMarker
		}
	}
	return nil
}

func (x *StreamPutKVChunksRequest) GetCommitMarker() *ChunkCommitMarker {
	if x != nil {
		if x, ok := x.RequestType.(*StreamPutKVChunksRequest_CommitMarker); ok {
			return x.CommitMarker
		}
	}
	return nil
}

func (x *StreamPutKVChunksRequest) GetChunk() *ChunkPutValue {
	if x != nil {
		if x, ok := x.RequestType.(*StreamPutKVChunksRequest_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

type isStreamPutKVChunksRequest_RequestType interface {
	isStreamPutKVChunksRequest_RequestType()
}

type StreamPutKVChunksRequest_StartMarker struct {
	StartMarker *ChunkStartMarker `protobuf:"bytes,1,opt,name=start_marker,json=startMarker,proto3,oneof"`
}

type StreamPutKVChunksRequest_CommitMarker struct {
	CommitMarker *ChunkCommitMarker `protobuf:"bytes,2,opt,name=commit_marker,json=commitMarker,proto3,oneof"`
}

type StreamPutKVChunksRequest_Chunk struct {
	Chunk *ChunkPutValue `protobuf:"bytes,3,opt,name=chunk,proto3,oneof"`
}

func (*StreamPutKVChunksRequest_StartMarker) isStreamPutKVChunksRequest_RequestType() {}

func (*StreamPutKVChunksRequest_CommitMarker) isStreamPutKVChunksRequest_RequestType() {}

func (*StreamPutKVChunksRequest_Chunk) isStreamPutKVChunksRequest_RequestType() {}

type ChunkStartMarker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkStartMarker) Reset() {
	*x = ChunkStartMarker{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkStartMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkStartMarker) ProtoMessage() {}

func (x *ChunkStartMarker) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkStartMarker.ProtoReflect.Descriptor instead.
func (*ChunkStartMarker) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{12}
}

func (x *ChunkStartMarker) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type ChunkPutValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkPutValue) Reset() {
	*x = ChunkPutValue{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkPutValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkPutValue) ProtoMessage() {}

func (x *ChunkPutValue) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkPutValue.ProtoReflect.Descriptor instead.
func (*ChunkPutValue) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{13}
}

func (x *ChunkPutValue) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ChunkPutValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ChunkCommitMarker struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChunkCommitMarker) Reset() {
	*x = ChunkCommitMarker{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChunkCommitMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChunkCommitMarker) ProtoMessage() {}

func (x *ChunkCommitMarker) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChunkCommitMarker.ProtoReflect.Descriptor instead.
func (*ChunkCommitMarker) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{14}
}

func (x *ChunkCommitMarker) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type StreamPutKVChunksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamPutKVChunksResponse) Reset() {
	*x = StreamPutKVChunksResponse{}
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamPutKVChunksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamPutKVChunksResponse) ProtoMessage() {}

func (x *StreamPutKVChunksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kvalchemy_replicator_v1_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamPutKVChunksResponse.ProtoReflect.Descriptor instead.
func (*StreamPutKVChunksResponse) Descriptor() ([]byte, []int) {
	return file_kvalchemy_replicator_v1_service_proto_rawDescGZIP(), []int{15}
}

func (x *StreamPutKVChunksResponse) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

var File_kvalchemy_replicator_v1_service_proto protoreflect.FileDescriptor

var file_kvalchemy_replicator_v1_service_proto_rawDesc = string([]byte{
	0x0a, 0x25, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x40, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x41, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x41,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x77, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x0a, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33,
	0x0a, 0x07, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x73, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x09, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x22, 0x70, 0x0a, 0x0c, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x56, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x74,
	0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6b, 0x76, 0x5f,
	0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x76,
	0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x6b, 0x76, 0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x50,
	0x75, 0x74, 0x4b, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x0a, 0x15,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75,
	0x74, 0x4b, 0x56, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65,
	0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68,
	0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x50, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x10, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x0d, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x50, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x2f, 0x0a,
	0x19, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x32, 0x7d,
	0x0a, 0x15, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x57, 0x41, 0x4c, 0x12, 0x29, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79,
	0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x41, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x57, 0x41, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xa9, 0x04,
	0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x56, 0x0a, 0x05, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x12, 0x25, 0x2e, 0x6b, 0x76, 0x61,
	0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x74, 0x4b,
	0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x12, 0x2b, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63,
	0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d,
	0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x5f, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x56, 0x12, 0x28, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4b, 0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6b, 0x76,
	0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x56, 0x12, 0x2e, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63,
	0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63,
	0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b,
	0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12, 0x7c, 0x0a, 0x11, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73,
	0x12, 0x31, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2e,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x50, 0x75, 0x74, 0x4b, 0x56, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x6b, 0x75, 0x72, 0x2d, 0x61, 0x6e,
	0x61, 0x6e, 0x64, 0x2f, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6b, 0x76, 0x61, 0x6c, 0x63,
	0x68, 0x65, 0x6d, 0x79, 0x2f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_kvalchemy_replicator_v1_service_proto_rawDescOnce sync.Once
	file_kvalchemy_replicator_v1_service_proto_rawDescData []byte
)

func file_kvalchemy_replicator_v1_service_proto_rawDescGZIP() []byte {
	file_kvalchemy_replicator_v1_service_proto_rawDescOnce.Do(func() {
		file_kvalchemy_replicator_v1_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kvalchemy_replicator_v1_service_proto_rawDesc), len(file_kvalchemy_replicator_v1_service_proto_rawDesc)))
	})
	return file_kvalchemy_replicator_v1_service_proto_rawDescData
}

var file_kvalchemy_replicator_v1_service_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_kvalchemy_replicator_v1_service_proto_goTypes = []any{
	(*StreamWALRequest)(nil),          // 0: kvalchemy.replicator.v1.StreamWALRequest
	(*StreamWALResponse)(nil),         // 1: kvalchemy.replicator.v1.StreamWALResponse
	(*WALRecord)(nil),                 // 2: kvalchemy.replicator.v1.WALRecord
	(*PutKVRequest)(nil),              // 3: kvalchemy.replicator.v1.PutKVRequest
	(*StreamPutKVRequest)(nil),        // 4: kvalchemy.replicator.v1.StreamPutKVRequest
	(*PutKVResponse)(nil),             // 5: kvalchemy.replicator.v1.PutKVResponse
	(*StreamPutKVResponse)(nil),       // 6: kvalchemy.replicator.v1.StreamPutKVResponse
	(*DeleteKVRequest)(nil),           // 7: kvalchemy.replicator.v1.DeleteKVRequest
	(*DeleteKVResponse)(nil),          // 8: kvalchemy.replicator.v1.DeleteKVResponse
	(*StreamDeleteKVRequest)(nil),     // 9: kvalchemy.replicator.v1.StreamDeleteKVRequest
	(*StreamDeleteKVResponse)(nil),    // 10: kvalchemy.replicator.v1.StreamDeleteKVResponse
	(*StreamPutKVChunksRequest)(nil),  // 11: kvalchemy.replicator.v1.StreamPutKVChunksRequest
	(*ChunkStartMarker)(nil),          // 12: kvalchemy.replicator.v1.ChunkStartMarker
	(*ChunkPutValue)(nil),             // 13: kvalchemy.replicator.v1.ChunkPutValue
	(*ChunkCommitMarker)(nil),         // 14: kvalchemy.replicator.v1.ChunkCommitMarker
	(*StreamPutKVChunksResponse)(nil), // 15: kvalchemy.replicator.v1.StreamPutKVChunksResponse
	(*timestamppb.Timestamp)(nil),     // 16: google.protobuf.Timestamp
}
var file_kvalchemy_replicator_v1_service_proto_depIdxs = []int32{
	2,  // 0: kvalchemy.replicator.v1.StreamWALResponse.wal_records:type_name -> kvalchemy.replicator.v1.WALRecord
	16, // 1: kvalchemy.replicator.v1.StreamWALResponse.sent_at:type_name -> google.protobuf.Timestamp
	16, // 2: kvalchemy.replicator.v1.PutKVRequest.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 3: kvalchemy.replicator.v1.StreamPutKVRequest.kv_pairs:type_name -> kvalchemy.replicator.v1.PutKVRequest
	7,  // 4: kvalchemy.replicator.v1.StreamDeleteKVRequest.deletes:type_name -> kvalchemy.replicator.v1.DeleteKVRequest
	12, // 5: kvalchemy.replicator.v1.StreamPutKVChunksRequest.start_marker:type_name -> kvalchemy.replicator.v1.ChunkStartMarker
	14, // 6: kvalchemy.replicator.v1.StreamPutKVChunksRequest.commit_marker:type_name -> kvalchemy.replicator.v1.ChunkCommitMarker
	13, // 7: kvalchemy.replicator.v1.StreamPutKVChunksRequest.chunk:type_name -> kvalchemy.replicator.v1.ChunkPutValue
	0,  // 8: kvalchemy.replicator.v1.WALReplicationService.StreamWAL:input_type -> kvalchemy.replicator.v1.StreamWALRequest
	3,  // 9: kvalchemy.replicator.v1.KeyValueService.PutKV:input_type -> kvalchemy.replicator.v1.PutKVRequest
	4,  // 10: kvalchemy.replicator.v1.KeyValueService.StreamPutKV:input_type -> kvalchemy.replicator.v1.StreamPutKVRequest
	7,  // 11: kvalchemy.replicator.v1.KeyValueService.DeleteKV:input_type -> kvalchemy.replicator.v1.DeleteKVRequest
	9,  // 12: kvalchemy.replicator.v1.KeyValueService.StreamDeleteKV:input_type -> kvalchemy.replicator.v1.StreamDeleteKVRequest
	11, // 13: kvalchemy.replicator.v1.KeyValueService.StreamPutKVChunks:input_type -> kvalchemy.replicator.v1.StreamPutKVChunksRequest
	1,  // 14: kvalchemy.replicator.v1.WALReplicationService.StreamWAL:output_type -> kvalchemy.replicator.v1.StreamWALResponse
	5,  // 15: kvalchemy.replicator.v1.KeyValueService.PutKV:output_type -> kvalchemy.replicator.v1.PutKVResponse
	6,  // 16: kvalchemy.replicator.v1.KeyValueService.StreamPutKV:output_type -> kvalchemy.replicator.v1.StreamPutKVResponse
	8,  // 17: kvalchemy.replicator.v1.KeyValueService.DeleteKV:output_type -> kvalchemy.replicator.v1.DeleteKVResponse
	10, // 18: kvalchemy.replicator.v1.KeyValueService.StreamDeleteKV:output_type -> kvalchemy.replicator.v1.StreamDeleteKVResponse
	15, // 19: kvalchemy.replicator.v1.KeyValueService.StreamPutKVChunks:output_type -> kvalchemy.replicator.v1.StreamPutKVChunksResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_kvalchemy_replicator_v1_service_proto_init() }
func file_kvalchemy_replicator_v1_service_proto_init() {
	if File_kvalchemy_replicator_v1_service_proto != nil {
		return
	}
	file_kvalchemy_replicator_v1_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_kvalchemy_replicator_v1_service_proto_msgTypes[11].OneofWrappers = []any{
		(*StreamPutKVChunksRequest_StartMarker)(nil),
		(*StreamPutKVChunksRequest_CommitMarker)(nil),
		(*StreamPutKVChunksRequest_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kvalchemy_replicator_v1_service_proto_rawDesc), len(file_kvalchemy_replicator_v1_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_kvalchemy_replicator_v1_service_proto_goTypes,
		DependencyIndexes: file_kvalchemy_replicator_v1_service_proto_depIdxs,
		MessageInfos:      file_kvalchemy_replicator_v1_service_proto_msgTypes,
	}.Build()
	File_kvalchemy_replicator_v1_service_proto = out.File
	file_kvalchemy_replicator_v1_service_proto_goTypes = nil
	file_kvalchemy_replicator_v1_service_proto_depIdxs = nil
}
