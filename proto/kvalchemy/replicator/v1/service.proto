syntax = "proto3";
package kvalchemy.replicator.v1;

option go_package = "github.com/ankur-anand/kvalchemy/proto/gen/go/kvalchemy/replicator/v1";

import "google/protobuf/timestamp.proto";

service WALReplicationService {
  /// Stream WAL Logs
  rpc StreamWAL(StreamWALRequest) returns (stream StreamWALResponse);

  rpc PutKV(PutKVRequest) returns (PutKVResponse);

  rpc StreamPutKV(stream StreamPutKVRequest) returns (StreamPutKVResponse);

  rpc DeleteKV(DeleteKVRequest) returns (DeleteKVResponse);

  rpc StreamDeleteKV(stream StreamDeleteKVRequest) returns (StreamDeleteKVResponse);

}

message StreamWALRequest {
  optional bytes metadata = 1; // Last applied WAL checkpoint
}

// Server's Response Message (Streaming)
message StreamWALResponse {
  repeated WALRecord wal_records = 1;   // A batch of WAL records
  google.protobuf.Timestamp sent_at = 2; // Server timestamp when the batch was sent
}

// WAL Record Format
message WALRecord {
  bytes metadata = 1;
  bytes compressed_data = 2;        // Compressed WAL entry (LZ4)

  bool is_chunked = 3;              // Is this part of a chunked WAL entry?
  uint32 chunk_index = 4;           // Chunk number in the sequence
  string chunk_type = 5;            // start and end of chunk marker.

  fixed32 checksum = 6;
}

message PutKVRequest {
  bytes key = 1;                      // Binary key (Required)
  bytes value = 2;                    // Binary value (Optional)
  bytes batch_id = 3;                 // Optional batch identifier (UUID)
  google.protobuf.Timestamp timestamp = 4; // Timestamp for consistency
}

message StreamPutKVRequest {
  repeated PutKVRequest kv_pairs = 1;  // Batch insert requests
}

message PutKVResponse {}

message StreamPutKVResponse {}

message DeleteKVRequest {
  bytes key = 1;
}

message DeleteKVResponse {}

message StreamDeleteKVRequest {
  repeated DeleteKVRequest deletes = 1; // List of keys to delete
}

message StreamDeleteKVResponse {}
