// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package walrecord

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WalRecord struct {
	_tab flatbuffers.Table
}

func GetRootAsWalRecord(buf []byte, offset flatbuffers.UOffsetT) *WalRecord {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WalRecord{}
	x.Init(buf, n+offset)
	return x
}

func FinishWalRecordBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWalRecord(buf []byte, offset flatbuffers.UOffsetT) *WalRecord {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WalRecord{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWalRecordBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *WalRecord) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WalRecord) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WalRecord) Index() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WalRecord) MutateIndex(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *WalRecord) Hlc() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WalRecord) MutateHlc(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *WalRecord) Crc32Checksum() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WalRecord) MutateCrc32Checksum(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *WalRecord) Operation() LogOperation {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return LogOperation(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WalRecord) MutateOperation(n LogOperation) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *WalRecord) TxnStatus() TxnStatus {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return TxnStatus(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WalRecord) MutateTxnStatus(n TxnStatus) bool {
	return rcv._tab.MutateByteSlot(12, byte(n))
}

func (rcv *WalRecord) EntryType() EntryType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return EntryType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WalRecord) MutateEntryType(n EntryType) bool {
	return rcv._tab.MutateByteSlot(14, byte(n))
}

func (rcv *WalRecord) TxnId(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *WalRecord) TxnIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WalRecord) TxnIdBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WalRecord) MutateTxnId(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *WalRecord) PrevTxnWalIndex(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *WalRecord) PrevTxnWalIndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WalRecord) PrevTxnWalIndexBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WalRecord) MutatePrevTxnWalIndex(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *WalRecord) Key(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *WalRecord) KeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WalRecord) KeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WalRecord) MutateKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *WalRecord) Value(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *WalRecord) ValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WalRecord) ValueBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WalRecord) MutateValue(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *WalRecord) Columns(obj *ColumnEntry, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *WalRecord) ColumnsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func WalRecordStart(builder *flatbuffers.Builder) {
	builder.StartObject(11)
}
func WalRecordAddIndex(builder *flatbuffers.Builder, index uint64) {
	builder.PrependUint64Slot(0, index, 0)
}
func WalRecordAddHlc(builder *flatbuffers.Builder, hlc uint64) {
	builder.PrependUint64Slot(1, hlc, 0)
}
func WalRecordAddCrc32Checksum(builder *flatbuffers.Builder, crc32Checksum uint32) {
	builder.PrependUint32Slot(2, crc32Checksum, 0)
}
func WalRecordAddOperation(builder *flatbuffers.Builder, operation LogOperation) {
	builder.PrependByteSlot(3, byte(operation), 0)
}
func WalRecordAddTxnStatus(builder *flatbuffers.Builder, txnStatus TxnStatus) {
	builder.PrependByteSlot(4, byte(txnStatus), 0)
}
func WalRecordAddEntryType(builder *flatbuffers.Builder, entryType EntryType) {
	builder.PrependByteSlot(5, byte(entryType), 0)
}
func WalRecordAddTxnId(builder *flatbuffers.Builder, txnId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(txnId), 0)
}
func WalRecordStartTxnIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func WalRecordAddPrevTxnWalIndex(builder *flatbuffers.Builder, prevTxnWalIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(prevTxnWalIndex), 0)
}
func WalRecordStartPrevTxnWalIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func WalRecordAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(key), 0)
}
func WalRecordStartKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func WalRecordAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(value), 0)
}
func WalRecordStartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func WalRecordAddColumns(builder *flatbuffers.Builder, columns flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(10, flatbuffers.UOffsetT(columns), 0)
}
func WalRecordStartColumnsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WalRecordEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
