// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: kv.proto

package serialization

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TxnStatus enum
type TxnStatus int32

const (
	TxnStatus_TXN_NONE TxnStatus = 0
	TxnStatus_BEGIN    TxnStatus = 1
	TxnStatus_PREPARE  TxnStatus = 2
	TxnStatus_COMMIT   TxnStatus = 3
)

// Enum value maps for TxnStatus.
var (
	TxnStatus_name = map[int32]string{
		0: "TXN_NONE",
		1: "BEGIN",
		2: "PREPARE",
		3: "COMMIT",
	}
	TxnStatus_value = map[string]int32{
		"TXN_NONE": 0,
		"BEGIN":    1,
		"PREPARE":  2,
		"COMMIT":   3,
	}
)

func (x TxnStatus) Enum() *TxnStatus {
	p := new(TxnStatus)
	*p = x
	return p
}

func (x TxnStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxnStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_kv_proto_enumTypes[0].Descriptor()
}

func (TxnStatus) Type() protoreflect.EnumType {
	return &file_kv_proto_enumTypes[0]
}

func (x TxnStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxnStatus.Descriptor instead.
func (TxnStatus) EnumDescriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{0}
}

// LogOperation enum
type LogOperation int32

const (
	LogOperation_NOOP       LogOperation = 0
	LogOperation_INSERT     LogOperation = 1
	LogOperation_DELETE     LogOperation = 2
	LogOperation_TXN_MARKER LogOperation = 3
)

// Enum value maps for LogOperation.
var (
	LogOperation_name = map[int32]string{
		0: "NOOP",
		1: "INSERT",
		2: "DELETE",
		3: "TXN_MARKER",
	}
	LogOperation_value = map[string]int32{
		"NOOP":       0,
		"INSERT":     1,
		"DELETE":     2,
		"TXN_MARKER": 3,
	}
)

func (x LogOperation) Enum() *LogOperation {
	p := new(LogOperation)
	*p = x
	return p
}

func (x LogOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_kv_proto_enumTypes[1].Descriptor()
}

func (LogOperation) Type() protoreflect.EnumType {
	return &file_kv_proto_enumTypes[1]
}

func (x LogOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogOperation.Descriptor instead.
func (LogOperation) EnumDescriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{1}
}

// ValueType enum
type ValueType int32

const (
	ValueType_FULL    ValueType = 0 // Not a chunked value
	ValueType_CHUNKED ValueType = 1
	ValueType_COLUMN  ValueType = 2
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0: "FULL",
		1: "CHUNKED",
		2: "COLUMN",
	}
	ValueType_value = map[string]int32{
		"FULL":    0,
		"CHUNKED": 1,
		"COLUMN":  2,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_kv_proto_enumTypes[2].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_kv_proto_enumTypes[2]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{2}
}

// Column Entry: Supports multiple column updates per WAL record
type ColumnEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColumnName    string                 `protobuf:"bytes,1,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	ColumnValue   []byte                 `protobuf:"bytes,2,opt,name=column_value,json=columnValue,proto3" json:"column_value,omitempty"`
	Crc32Checksum uint32                 `protobuf:"varint,3,opt,name=crc32_checksum,json=crc32Checksum,proto3" json:"crc32_checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnEntry) Reset() {
	*x = ColumnEntry{}
	mi := &file_kv_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnEntry) ProtoMessage() {}

func (x *ColumnEntry) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnEntry.ProtoReflect.Descriptor instead.
func (*ColumnEntry) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{0}
}

func (x *ColumnEntry) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *ColumnEntry) GetColumnValue() []byte {
	if x != nil {
		return x.ColumnValue
	}
	return nil
}

func (x *ColumnEntry) GetCrc32Checksum() uint32 {
	if x != nil {
		return x.Crc32Checksum
	}
	return 0
}

// WalRecord is the main record structure for the Write-Ahead Log
type WalRecord struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Scalar fields
	Index         uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Hlc           uint64 `protobuf:"varint,2,opt,name=hlc,proto3" json:"hlc,omitempty"`
	Crc32Checksum uint32 `protobuf:"varint,3,opt,name=crc32_checksum,json=crc32Checksum,proto3" json:"crc32_checksum,omitempty"`
	// Enum fields
	Operation LogOperation `protobuf:"varint,4,opt,name=operation,proto3,enum=seria.LogOperation" json:"operation,omitempty"`
	TxnStatus TxnStatus    `protobuf:"varint,5,opt,name=txn_status,json=txnStatus,proto3,enum=seria.TxnStatus" json:"txn_status,omitempty"`
	ValueType ValueType    `protobuf:"varint,6,opt,name=value_type,json=valueType,proto3,enum=seria.ValueType" json:"value_type,omitempty"`
	// Variable-sized fields
	TxnId           []byte         `protobuf:"bytes,7,opt,name=txn_id,json=txnId,proto3" json:"txn_id,omitempty"`
	PrevTxnWalIndex []byte         `protobuf:"bytes,8,opt,name=prev_txn_wal_index,json=prevTxnWalIndex,proto3" json:"prev_txn_wal_index,omitempty"` // index of the previous entry in the same transaction
	Key             []byte         `protobuf:"bytes,9,opt,name=key,proto3" json:"key,omitempty"`                                                    // required in flatbuffers but proto3 doesn't have required fields
	Value           []byte         `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	Columns         []*ColumnEntry `protobuf:"bytes,11,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WalRecord) Reset() {
	*x = WalRecord{}
	mi := &file_kv_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalRecord) ProtoMessage() {}

func (x *WalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_kv_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalRecord.ProtoReflect.Descriptor instead.
func (*WalRecord) Descriptor() ([]byte, []int) {
	return file_kv_proto_rawDescGZIP(), []int{1}
}

func (x *WalRecord) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *WalRecord) GetHlc() uint64 {
	if x != nil {
		return x.Hlc
	}
	return 0
}

func (x *WalRecord) GetCrc32Checksum() uint32 {
	if x != nil {
		return x.Crc32Checksum
	}
	return 0
}

func (x *WalRecord) GetOperation() LogOperation {
	if x != nil {
		return x.Operation
	}
	return LogOperation_NOOP
}

func (x *WalRecord) GetTxnStatus() TxnStatus {
	if x != nil {
		return x.TxnStatus
	}
	return TxnStatus_TXN_NONE
}

func (x *WalRecord) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_FULL
}

func (x *WalRecord) GetTxnId() []byte {
	if x != nil {
		return x.TxnId
	}
	return nil
}

func (x *WalRecord) GetPrevTxnWalIndex() []byte {
	if x != nil {
		return x.PrevTxnWalIndex
	}
	return nil
}

func (x *WalRecord) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *WalRecord) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WalRecord) GetColumns() []*ColumnEntry {
	if x != nil {
		return x.Columns
	}
	return nil
}

var File_kv_proto protoreflect.FileDescriptor

var file_kv_proto_rawDesc = string([]byte{
	0x0a, 0x08, 0x6b, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x22, 0x78, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x63, 0x33, 0x32, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72,
	0x63, 0x33, 0x32, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x89, 0x03, 0x0a, 0x09,
	0x57, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x68, 0x6c, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x68, 0x6c,
	0x63, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x63, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x72, 0x63, 0x33, 0x32,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0a, 0x74,
	0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x74, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2f, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74,
	0x78, 0x6e, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x74, 0x78, 0x6e,
	0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x54, 0x78, 0x6e, 0x57, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x2a, 0x3d, 0x0a, 0x09, 0x54, 0x78, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x58, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x2a, 0x40, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x58, 0x4e, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x03, 0x2a, 0x2e, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x48, 0x55, 0x4e, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x02, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x6b, 0x75, 0x72, 0x2d, 0x61, 0x6e, 0x61,
	0x6e, 0x64, 0x2f, 0x6b, 0x76, 0x61, 0x6c, 0x63, 0x68, 0x65, 0x6d, 0x79, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_kv_proto_rawDescOnce sync.Once
	file_kv_proto_rawDescData []byte
)

func file_kv_proto_rawDescGZIP() []byte {
	file_kv_proto_rawDescOnce.Do(func() {
		file_kv_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_kv_proto_rawDesc), len(file_kv_proto_rawDesc)))
	})
	return file_kv_proto_rawDescData
}

var file_kv_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_kv_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_kv_proto_goTypes = []any{
	(TxnStatus)(0),      // 0: seria.TxnStatus
	(LogOperation)(0),   // 1: seria.LogOperation
	(ValueType)(0),      // 2: seria.ValueType
	(*ColumnEntry)(nil), // 3: seria.ColumnEntry
	(*WalRecord)(nil),   // 4: seria.WalRecord
}
var file_kv_proto_depIdxs = []int32{
	1, // 0: seria.WalRecord.operation:type_name -> seria.LogOperation
	0, // 1: seria.WalRecord.txn_status:type_name -> seria.TxnStatus
	2, // 2: seria.WalRecord.value_type:type_name -> seria.ValueType
	3, // 3: seria.WalRecord.columns:type_name -> seria.ColumnEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_kv_proto_init() }
func file_kv_proto_init() {
	if File_kv_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_kv_proto_rawDesc), len(file_kv_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kv_proto_goTypes,
		DependencyIndexes: file_kv_proto_depIdxs,
		EnumInfos:         file_kv_proto_enumTypes,
		MessageInfos:      file_kv_proto_msgTypes,
	}.Build()
	File_kv_proto = out.File
	file_kv_proto_goTypes = nil
	file_kv_proto_depIdxs = nil
}
